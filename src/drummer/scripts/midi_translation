#!/usr/bin/env python3
from re import I
from mido import MidiFile
import os
import sys

import pretty_midi


# ROS imports
import rospy
import tf2_ros
import tf2_geometry_msgs
from geometry_msgs.msg import PoseStamped, Pose, TransformStamped

# Robot interface
import actionlib
from control_msgs.msg import FollowJointTrajectoryAction, FollowJointTrajectoryGoal
from trajectory_msgs.msg import JointTrajectoryPoint
from controller_manager_msgs.srv import SwitchControllerRequest, SwitchController
from controller_manager_msgs.srv import LoadControllerRequest, LoadController
import geometry_msgs.msg as geometry_msgs
from cartesian_control_msgs.msg import (
    FollowCartesianTrajectoryAction,
    FollowCartesianTrajectoryGoal,
    CartesianTrajectoryPoint,
)

# Local imports
from drummer.msg import PoseStampedArray

# creating dictionary for translation of number of note to name of instrument
instruments_dictionary = {
35: 'Bass Drum 2',
36: 'Bass Drum 1',
37: 'Side Stick',
38: 'Snare Drum 1',
39: 'Hand Clap',
40: 'Snare Drum 2',
41: 'Low Tom 2',
42: 'Closed Hi-hat',
43: 'Low Tom 1',
44: 'Pedal Hi-hat',
45: 'Mid Tom 2',
46: 'Open Hi-hat',
47: 'Mid Tom 1',
48: 'High Tom 2',
49: 'Crash Cymbal 1',
50: 'High Tom 1',
51: 'Ride Cymbal 1',
52: 'Chinese Cymbal',
53: 'Ride Bell',
54: 'Tambourine',
55: 'Splash Cymbal',
56: 'Cowbell',
57: 'Crash Cymbal 2',
58: 'Vibra Slap',

59: 'Ride Cymbal 2',
60: 'High Bongo',
61: 'Low Bongo',
62: 'Mute High Conga',
63: 'Open High Conga',
64: 'Low Conga',
65: 'High Timbale',
66: 'Low Timbale',
67: 'High Agogo',
68: 'Low Agogo',
69: 'Cabasa',
70: 'Maracas',
71: 'Short Whistle',
72: 'Long Whistle',
73: 'Short Guiro',
74: 'Long Guiro',
75: 'Claves',
76: 'High Wood Block',
77: 'Low Wood Block',
78: 'Mute Cuica',
79: 'Open Cuica',
80: 'Mute Triangle',
81: 'Open Triangle' }

# printing name and type, aswell as numbers of tracks and messages of file
file_name = 'AC_DC_-_Highway_to_hell.mid'
SCRIPTDIR = os.path.dirname(__file__)

tf_buffer = None
tf_listener = None


class TrajectoryClient:
    """Small trajectory client to test a joint trajectory"""

    # All of those controllers can be used to execute joint-based trajectories.
    # The scaled versions should be preferred over the non-scaled versions.
    JOINT_TRAJECTORY_CONTROLLERS = [
        "scaled_pos_joint_traj_controller",
        "scaled_vel_joint_traj_controller",
        "pos_joint_traj_controller",
        "vel_joint_traj_controller",
        "forward_joint_traj_controller",
    ]

    # All of those controllers can be used to execute Cartesian trajectories.
    # The scaled versions should be preferred over the non-scaled versions.
    CARTESIAN_TRAJECTORY_CONTROLLERS = [
        "pose_based_cartesian_traj_controller",
        "joint_based_cartesian_traj_controller",
        "forward_cartesian_traj_controller",
    ]

    # We'll have to make sure that none of these controllers are running, as they will
    # be conflicting with the joint trajectory controllers
    CONFLICTING_CONTROLLERS = ["joint_group_vel_controller", "twist_controller"]

    def __init__(self):
        timeout = rospy.Duration(5)
        self.switch_srv = rospy.ServiceProxy(
            "controller_manager/switch_controller", SwitchController
        )
        self.load_srv = rospy.ServiceProxy("controller_manager/load_controller", LoadController)
        try:
            self.switch_srv.wait_for_service(timeout.to_sec())
        except rospy.exceptions.ROSException as err:
            rospy.logerr("Could not reach controller switch service. Msg: {}".format(err))
            sys.exit(-1)

        self.cartesian_trajectory_controller = self.CARTESIAN_TRAJECTORY_CONTROLLERS[0]

    def send_cartesian_trajectory(self, poses, timestamps):
        """Creates a Cartesian trajectory and sends it using the selected action server"""
        self.switch_controller(self.cartesian_trajectory_controller)

        # make sure the correct controller is loaded and activated
        goal = FollowCartesianTrajectoryGoal()
        trajectory_client = actionlib.SimpleActionClient(
            "{}/follow_cartesian_trajectory".format(self.cartesian_trajectory_controller),
            FollowCartesianTrajectoryAction,
        )

        trajectory_client.wait_for_server(rospy.Duration(1))

        assert len(poses) == len(timestamps)
        for i, pose in enumerate(poses):
            point = CartesianTrajectoryPoint()
            point.pose = pose
            point.time_from_start = rospy.Duration(timestamps[i])
            goal.trajectory.points.append(point)

        rospy.loginfo(
            "Executing trajectory using the {}".format(self.cartesian_trajectory_controller)
        )

        trajectory_client.send_goal(goal)
        trajectory_client.wait_for_result()

        result = trajectory_client.get_result()

        rospy.loginfo("Trajectory execution finished in state {}".format(result.error_code))

    def switch_controller(self, target_controller):
        """Activates the desired controller and stops all others from the predefined list above"""
        other_controllers = (
            self.JOINT_TRAJECTORY_CONTROLLERS
            + self.CARTESIAN_TRAJECTORY_CONTROLLERS
            + self.CONFLICTING_CONTROLLERS
        )

        other_controllers.remove(target_controller)

        srv = LoadControllerRequest()
        srv.name = target_controller
        self.load_srv(srv)

        srv = SwitchControllerRequest()
        srv.stop_controllers = other_controllers
        srv.start_controllers = [target_controller]
        srv.strictness = SwitchControllerRequest.BEST_EFFORT
        self.switch_srv(srv)

    def ask_confirmation(self):
        """Ask the user for confirmation. This function is obviously not necessary, but makes sense
        in a testing script when you know nothing about the user's setup."""
        confirmed = False
        valid = False
        while not valid and not rospy.is_shutdown():
            input_str = input(
                "Please confirm that the robot path is clear of obstacles.\n"
                "Keep the EM-Stop available at all times. You are executing\n"
                "the motion at your own risk. Please type 'y' to proceed or 'n' to abort: "
            )
            valid = input_str in ["y", "n"]
            if not valid:
                rospy.loginfo("Please confirm by entering 'y' or abort by entering 'n'")
            else:
                confirmed = input_str == "y"
        if not confirmed:
            rospy.loginfo("Exiting as requested by user.")
            sys.exit(0)


def initialize_everything(t_client: TrajectoryClient):
    """
    Measures the position of all drum components and publishes them into /tf_static
    """
    # 1. Move Robot into start pose
    start_pose = geometry_msgs.Pose(
        geometry_msgs.Vector3(0, -0.5, 0.8), geometry_msgs.Quaternion(0.7071067811865475, 0, 0, 0.7071067811865475))
    start_time = 1.0

    t_client.send_cartesian_trajectory(poses=[start_pose], timestamps=[start_time])

    # 2. receive aruco codes in camera frame from aruco node
    arucos = rospy.wait_for_message('aruco_poses', PoseStampedArray, 5) # TODO: switch from msg to service

    # 3. convert start_pose from Pose datatype into camera-to-base-transform Transform
    cam_to_base = tf_buffer.lookup_transform('base', 'camera', rospy.Time(0))

    # 4. Use camera-to-base-transform and bring all arucos into base frame
    arucos_in_base = []
    frame_names = []
    for aruco_pose in arucos.poses:
        frame_names.append(aruco_pose.header.frame_id)
        aruco_in_base = tf2_geometry_msgs.do_transform_pose(aruco_pose, cam_to_base)
        arucos_in_base.append(aruco_in_base)
        # TODO: make sure that the header is still equal to the component name (or aruco id)

    # 5. turn all aruco poses into base-to-aruco-transforms
    aruco_transforms = []
    for i, aruco_in_base in enumerate(arucos_in_base):
        rospy.loginfo(f"Found transform to {frame_names[i]}")
        base_to_aruco = TransformStamped()
        base_to_aruco.header.frame_id = 'base'
        base_to_aruco.header.stamp = rospy.Time.now()
        base_to_aruco.child_frame_id = frame_names[i]
        base_to_aruco.transform.translation.x = aruco_in_base.pose.position.x
        base_to_aruco.transform.translation.y = aruco_in_base.pose.position.y
        base_to_aruco.transform.translation.z = aruco_in_base.pose.position.z
        base_to_aruco.transform.rotation.x = aruco_in_base.pose.orientation.x
        base_to_aruco.transform.rotation.y = aruco_in_base.pose.orientation.y
        base_to_aruco.transform.rotation.z = aruco_in_base.pose.orientation.z
        base_to_aruco.transform.rotation.w = aruco_in_base.pose.orientation.w

        aruco_transforms.append(base_to_aruco)

    # 6. publish static transform
    br = tf2_ros.StaticTransformBroadcaster()
    br.sendTransform(aruco_transforms)



if __name__ == '__main__':
    rospy.init_node('midi_translation')
    tf_buffer = tf2_ros.Buffer()
    tf_listener = tf2_ros.TransformListener(tf_buffer)

    ##### Step 0: Initialize Tf Tree based on aruco codes #####
    t_client = TrajectoryClient()
    initialize_everything(t_client)

    ##### Step 1: Load the Midi File #####
    mid = MidiFile(os.path.join(SCRIPTDIR, '..', 'MIDI', 'samples', file_name), clip=True) 

    # removing duplicates of tracks
    message_numbers = []
    duplicates = []

    for track in mid.tracks:                    # searching track by track in MIDI file
        if len(track) in message_numbers:       # if number of messages in a track equals number of messages from a previous track
            duplicates.append(track)            # then add to duplicates
        else:
            message_numbers.append(len(track))

    for track in duplicates:                    # remove the duplicates
        mid.tracks.remove(track)


    wrong_tracks = []
    # finding the track of the drums in MIDI files via channel    
    for track in mid.tracks:                  # going through the tracks of the file
        for msg in track:                                   # going through the messages in each track
            if not msg.is_meta and (msg.channel != 9):      # checking non-meta messages and looking for the messages with channel = 9
                wrong_tracks.append(track)
                break

    for track in wrong_tracks:
        mid.tracks.remove(track)

    new_file_name = 'drums_only_{}'.format(file_name)
    mid.save('.\\MIDI\\samples\\{}'.format(new_file_name))


    ##### Source: https://www.audiolabs-erlangen.de/resources/MIR/FMP/C1/C1S2_MIDI.html #####

    midi_data = pretty_midi.PrettyMIDI('.\\MIDI\\samples\\{}'.format(new_file_name))
    midi_list = []

    # creating a list with the information about start, end, pitch, velocity and name of instrument of every 'note' (part of the drums) of the instrument
    for instrument in midi_data.instruments:
        for note in instrument.notes:
            start = note.start
            end = note.end
            pitch = note.pitch
            velocity = note.velocity
            midi_list.append([start, end, pitch, velocity, instrument.name])
            
    midi_list = sorted(midi_list, key=lambda x: (x[0], x[2]))

    ##### Step 2: Iterate through all midi notes and publish target poses #####

    # printing the name of the 'note' of the instrument in the moment it is actually played
    # This is just for debug purposes. Access via `rostopic echo hit`
    drum_publisher = rospy.Publisher('hit', PoseStamped, tcp_nodelay=True, queue_size=100)

    # turn midi list into trajectoy
    poses = []
    timestamps = []
    busy_times = [0.0]
    target_components = []
    for k, line in enumerate(midi_list):
        if rospy.is_shutdown():
            break

        start, end, pitch, velocity, instrument = line
        component_name = instruments_dictionary[pitch]

        # first come first serve
        if abs(start - busy_times[-1]) < 0.0:
            rospy.loginfo(f'{component_name} ignored due to already occupied')
            continue
        else:
            busy_times.append(start) # occupy this timeslot

        ##### Part 1: Finding the target pose #####
        target_pose = PoseStamped()
        target_pose.header.frame_id = component_name
        target_pose.header.stamp = rospy.Time.now()
        target_pose.pose.position.x = 0
        target_pose.pose.position.y = 0
        target_pose.pose.position.z = 0.15 # hover so much above the aruco codes
        target_pose.pose.orientation.x = 0
        target_pose.pose.orientation.y = 0
        target_pose.pose.orientation.z = 0
        target_pose.pose.orientation.w = 1

        try:
            trans = tf_buffer.lookup_transform('base', component_name, rospy.Time(0))
            target_pose = tf2_geometry_msgs.do_transform_pose(target_pose, trans)
            target_pose.pose.position.y -= 0 # take the stick into account

            # turn 90 degree by x and then 180 by z
            target_pose.pose.orientation.x = 0
            target_pose.pose.orientation.y = -0.7071067811865475
            target_pose.pose.orientation.z = 0.7071067811865475
            target_pose.pose.orientation.w = 0

        except (tf2_ros.LookupException, tf2_ros.ConnectivityException, tf2_ros.ExtrapolationException) as e:
            rospy.logerr(f'Cannot find {component_name}: {e}')
            continue

        print(target_pose)
        ##### Part 2: Timing of the hit #####
        hit_time = midi_list[k][0] + 1 # +1 to delay the entire thing a bit

        ##### Part 3: fill the trajectory #####
        drum_publisher.publish(target_pose)
        poses.append(target_pose.pose)
        timestamps.append(hit_time)
        target_components.append(component_name)

    
    # Start playing by sending the trajectory to the robot
    for i, name in enumerate(target_components):
        rospy.loginfo(f'{name} @ {timestamps[i]}')
    t_client = TrajectoryClient()
    t_client.ask_confirmation()
    t_client.send_cartesian_trajectory(poses=poses, timestamps=timestamps)



